source "%val{config}/fzf.kak"

eval %sh{kak-lsp --kakoune -s $kak_session}

colorscheme tomorrow-night
set global tabstop 2
set global indentwidth 2
set global scrolloff 5,1
set global grepcmd 'rg --column'

alias global x write-quit

# move through paragraphs
map global normal { [p
map global normal } ]p

map global user b :fzf-buffer<ret> -docstring 'FZF buffer'
map global user f :fzf-file<ret> -docstring 'FZF file'
map global user e :format<ret> -docstring 'Run formatter'
map global user j %{ <a-i>w :ctags-search<ret> } -docstring 'ctags jump to'
map global user r '<a-i>w :grep<ret>' -docstring 'Search current word across project'
map global user p '!xclip -o<ret>' -docstring 'Paste from selection clipboard'
map global user P '<a-!>xclip -o<ret>' -docstring 'Paste after from selection clipboard'
map global user y '<a-|>xclip<ret>' -docstring 'Yank current selection to clipboard'
hook global WinSetOption filetype=(java|ecma|type)script %{
  map global user d ':jsdoc<ret>' -docstring "Generate jsdoc for current function"
}

# jk to escape
hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}

# editorconfig
hook global BufCreate .* %{editorconfig-load}

# indentation with Tab
map global insert <tab> '<a-;><a-gt>'
map global insert <s-tab> '<a-;><a-lt>'

# autocompletion
hook global InsertCompletionShow .* %{
  map window insert <tab> <c-n>
  map window insert <s-tab> <c-p>
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# Highlighters
decl -hidden regex curword

# Keep track of the word under the cursor
hook global NormalIdle .* %{
  eval -draft %{ try %{
    exec <space><a-i>w #<a-k>\`\w+\'<ret>
    set buffer curword "\b\Q%val{selection}\E\b"
  } catch %{
    set buffer curword ''
  } }
}

hook global WinCreate .* %{
  addhl window/ wrap
  addhl window/ number-lines -relative -hlcursor
  # Highlights search results
  addhl window/ dynregex '%reg{/}' 0:+u 1:+b
  # addhl window/ regex \h+$ 0:Error

  # Highlights the word under the cursor
  addhl window/ dynregex '%opt{curword}' 0:+b
}

hook global WinSetOption filetype=(ecma|java|type)script %{
  set window formatcmd 'prettier --stdin --stdin-filepath $kak_buffile'
}

# linting
hook global WinSetOption filetype=typescript %{
  set window lintcmd 'tslint --outputAbsolutePaths -t json $kak_buffile | jqn \'map(e => `${e.name}:${e.startPosition.line + 1}:${e.startPosition.character}: Error: ${e.failure} (${e.ruleName}) `) | join("\n")\''
  lint-enable
}

hook global WinSetOption filetype=(ecma|java)script %{
  # linting using stdin as source (see https://github.com/mawww/kakoune/issues/2283)
  set window lintcmd 'run() { cat "$1" | npx eslint -f ~/.config/kak/eslint-kakoune.js --stdin --stdin-filename "$kak_buffile"; } && run '
  hook buffer BufWritePost .* %{
    lint
  }
}

# local config file
try %{ source .config.kak }
